/******************************************************************************
*                              Курс программирования                          *
*******************************************************************************
* Project Type  : Win32 Console Application                                   *
* Project Name  : Курсовая работа по спискам                                  *
* File Name     : List.h                                                      *
* Language      : c++20(latest), MSVS ver 143 and above                       *
* Programmers   : Парфенюк Дмитрий Александрович                              *
* Modified by   :                                                             *
* Created       : 01.11.2021                                                  *
* Last Revision : 10.11.2021                                                  *
*******************************************************************************
* Comments	    : Заголовок класса "Список"                                   *
******************************************************************************/
#pragma once
#include "Student.h"
#include <iostream>
#include <functional>

using dataType = Student;
// Предикат - булева функция одного аргумента.
// Используется функтор вместо указателя на функцию для возможности осуществления лямбда-захватов
using Predicate = std::function<bool(dataType*)>;
// Компаратор - булева функция двух аргументов.
// Используется функтор вместо указателя на функцию для возможности осуществления лямбда-захватов
using SortComparator = std::function<bool(dataType*, dataType*)>;

// Структура элемента списка
struct Node {
    dataType* data = nullptr; // Указатель на информацию
    Node* next = nullptr; // Указатель на следующий элемент
};

// Класс, реализующий список студентов
class List {
public:
    // Никакой особой инициализации, т.к. Все начальные значения задаются явно в прототипе.
    List() = default;

    // Получаем длину списка.
    int getLength();
    // Загрузка БД из файла filename
    void loadFromFile(std::string& fileName);
    // Сохранение в файл filename
    void saveToFile(std::string& filename);
    // Вывод в консоль списка.
    void consolePrint();

    // Добавление в начало списка
    void push(dataType*);
    // Добавление после элемента
    void appendAfter(dataType*, int index);

    // Удаление элемента из начала списка и возврат информации из него
    dataType* pop();
    // Удаление элемента в указанном месте
    void removeAt(int index);

    // Получить информацию по индексу
    dataType* getAt(int index);

    // Сортировка списка исходя из предоставленного компаратора
    List& sort(SortComparator comp);

    // Фильтрация списка исходя из предиката. Элементы нового списка являются глубокой копией оригинала.
    List* filter(Predicate pred);

    // Глубокое копирование элементов
    List* copy();
    // Возвращает индекс элемента, в котором хранится информация
    int searchIndex(dataType*);
    // Деструктор реализован, так, как при манипулировании списком используются new и delete
    ~List();

private:
    // Получает элемент списка по индексу, приватный, т.к. наличие элементов -
    // неважная для использования подробность реализации
    Node* getNodeAt(int index);

    // Первый элемент списка
    Node* m_head = nullptr;
    // Длина списка
    int m_length = 0;
};
/******************************************************************************
*                       End of file List.h                                    *
******************************************************************************/